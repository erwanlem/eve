import re
import os

TMP_CPP_FILE_NAME = "build/work/tmp.cpp"
TMP_O_FILE_NAME = "build/work/tmp.o"
TMP_ASM_FILE_NAME = "build/work/tmp.txt"


def generate_function(funcName:str, parameters:int):
    clear_tmp()
    tmp = open(TMP_CPP_FILE_NAME, 'x')

    # Parameters type of the generated function
    param_type = "signed char" 

    # Generation of the parameters
    formal_param = ""
    real_param = ""

    for i in range(0, parameters):
        if i == parameters-1:
            formal_param += f"eve::wide<{param_type}> a{i}"
            real_param += f"a{i}"
        else:
            formal_param += f"eve::wide<{param_type}> a{i}, "
            real_param += f"a{i}, "

    # Code of the temporary function
    code = """#include <eve/module/core.hpp>

auto f(""" + formal_param + """) {
    return eve::""" + funcName + "(" + real_param + """);
}"""

    tmp.write(code) # write code in TMP_FILE_NAME
    tmp.close()




def clear_tmp():
    if os.path.exists(TMP_CPP_FILE_NAME):
        os.system(f"rm {TMP_CPP_FILE_NAME}")
    if os.path.exists(TMP_O_FILE_NAME):
        os.system(f"rm {TMP_O_FILE_NAME}")
    if os.path.exists(TMP_ASM_FILE_NAME):
        os.system(f"rm {TMP_ASM_FILE_NAME}")




"""
Function to extract assembly instructions from string.
Input string must be generated by objdump.

@param asm: objdump desassemble output file
@return: instructions list
"""
def extract_instructions(asm:str):
    # extracts each instruction line (full line)
    x = re.findall("[0-9a-f]+:\t[^\n\t]+\t[^\n]+", asm)

    # instructions list
    instr = []

    for i in x:
        # extracts only the instruction name (without parameters)
        s = str.split(i, '\t')
        instr.append(str.split(s[2], ' ')[0])

    # remove useless instructions
    if 'endbr64' in instr:
        instr.remove('endbr64')
    if 'endbr32' in instr:
        instr.remove('endbr32')
    if 'ret' in instr:
        instr.remove('ret')

    return instr






def get_function_instructions(funcName:str, param_nb:int, keep_tmp=False):
    generate_function(funcName, param_nb)
    os.system(f"g++ {TMP_CPP_FILE_NAME} -O3 -std=c++20 -I include/ -c -o {TMP_O_FILE_NAME}")
    os.system(f"objdump -d -j .text -C {TMP_O_FILE_NAME} > {TMP_ASM_FILE_NAME}")

    file_asm = open(TMP_ASM_FILE_NAME)
    asm = file_asm.read()

    if not keep_tmp:
        clear_tmp()

    # print(extract_instructions(asm))
    return extract_instructions(asm)


get_function_instructions("max", 2)