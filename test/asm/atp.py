import sys
import generation
import files
import const
import validation

"""
        Assembly Testing Program

This is the main file of the ATP.
ATP is a tool made for validating EVE assembly code output.

Until now, this tool can:
    - Read functions from config files and generate corresponding assembly program.
        - Config files are organized as described below:
            The directory `config` contains a file for each function.
            Each file contains the name of the function and the parameters it takes.

    - Validate instructions generated by the current version of EVE by comparing 
    them with instructions previously saved in functions.json

Calling asmTesting without any option starts the validation process.
Options are:
    - `-m archName`
    - `-l` log file
    - `-input file` select file
    - `-d` deep
    - `-t` keep temporary files
    - `-r` raises exceptions
    - `-g` generate assembly
    - `-c compiler` clang/g++
    - `-v` verbose
    - `-ref` reference path
    - `-reset` remove reference files
    - `-disassembler method`
"""

OPTIONS = {
    "validate" : True,
    "log" : False,
    "deep" : False,
    "input" : 'all',
    "keep_tmp" : False,
    "generate" : False,
    "exception" : False,
    "verbose" : False,
    "disassembler" : "objdump",
    "instruction_comparison" : False,
    "flags" : [],
    "setup" : None,
    "compiler" : None,
    "output" : f"{const.root}output"
}



def flags_to_command_line(flags:list):
    fl = []
    for i in flags:
        fl.append('-' + i)
    return fl



def options_to_dict(options:list):
    """Get dictionary from args list

    Args:
        options (list): List of options given by os.argv. The first element of the list should be the name of the file.

    Raises:
        Exception: If option `-input` is not followed by files names
        Exception: If the option doesn't exist

    Returns:
       dict : dictionary with each option value
    """

    i = 1
    while i < len(options):
        if options[i] == '-m':
            lst = []
            while i+1 < len(options) and options[i+1][0] != '-':
                lst.append(options[i+1])
                i+=1
            if len(lst) == 0:
                raise Exception("Parameter missing for option -m")
            for j in lst:
                if j not in const.ARCH:
                    raise Exception(f"Invalid architecture name '{j}'")
            OPTIONS['arch'] = lst
        elif options[i] == '-l':
            OPTIONS['log'] = True
        elif options[i] == "-d":
            OPTIONS['deep'] = True
        elif options[i] == '-t':
            OPTIONS['keep_tmp'] = True
        elif options[i] == '-g':
            OPTIONS['generate'] = True
            OPTIONS['validate'] = False
        elif options[i] == '-i':
            OPTIONS["instruction_comparison"] = True
        elif options[i] == '-c':
            lst = []
            while i+1 < len(options) and options[i+1][0] != '-':
                lst.append(options[i+1])
                i+=1
            if len(lst) == 0:
                raise Exception("Parameter missing for option -c")
            
            OPTIONS['compiler'] = lst
        elif options[i] == '-v':
            OPTIONS['verbose'] = True
        elif options[i] == '--fatal':
            OPTIONS['exception'] = True
        elif options[i] == '--ref':
            OPTIONS['ref_path'] = options[i+1]
            i+=1
        elif options[i] == '--reset':
            OPTIONS['validate'] = False
            e = input("All references files will be deleted, do you confirm ? (Y/n)")
            if e == 'Y':
                files.reset()
        elif options[i] == "--disassembler":
            if options[i+1] == 'objdump' or options[i+1] == 'standard':
                OPTIONS['disassembler'] = options[i+1]
                i+=1
            else:
                raise Exception("Invalid parameter with option disassembler. Valid parameters are `standard` or `objdump`")
        elif options[i] == '--input':
            lst = []
            while i+1 < len(options) and options[i+1][0] != '-':
                lst.append(options[i+1])
                i+=1
            if len(lst) == 0:
                raise Exception("Parameter missing for option --input")
            OPTIONS['input'] = lst
        elif options[i] == '--flags':
            lst = []
            while i+1 < len(options) and options[i+1][0] != '-':
                lst.append('-' + options[i+1])
                i+=1
            if len(lst) == 0:
                raise Exception("Parameter missing for option --output")
            OPTIONS['flags'] = lst
        elif options[i] == '--output':
            OPTIONS['output'] = options[i+1]
            i+=1
        else:
            raise Exception(f"Invalid option {options[i]}")
        i+=1



def main():
    print(OPTIONS)
    """
    if OPTIONS['generate']:
        return generation.update(flags=OPTIONS['flags'], deep=OPTIONS['deep'], keep_tmp=OPTIONS['keep_tmp'], verbose=OPTIONS['verbose'],architecture=OPTIONS['arch'],\
                                 compiler=OPTIONS['compiler'], input=OPTIONS['input'], output_directory=OPTIONS['output'], method=OPTIONS['disassembler'])
    elif OPTIONS['validate']:
        return validation.validate(flags=OPTIONS['flags'],log_file=OPTIONS['log'], input=OPTIONS['input'], verbose=OPTIONS['verbose'], raise_exception=OPTIONS['exception'],\
                                    keep_tmp=OPTIONS['keep_tmp'], references_path=OPTIONS['output'], compiler=OPTIONS['compiler'], architecture=OPTIONS['arch'],\
                                          method=OPTIONS['disassembler'], instruction_compare=OPTIONS['instruction_comparison'])
                                          """


if __name__ == '__main__':
    argv = sys.argv
    
    options_to_dict(argv)
    main()
